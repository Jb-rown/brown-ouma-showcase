const fs = require('fs');
const path = require('path');

const PUBLIC_DIR = path.resolve(__dirname, '..', 'public');
const TARGET_FOLDER = path.join(PUBLIC_DIR, 'certificates');
const OUT_FILE = path.resolve(__dirname, '..', 'src', 'lib', 'certificates.ts');

function slugToTitle(filename) {
  return filename.replace(/\.pdf$/i, '').replace(/[_-]+/g, ' ').replace(/\s+/g, ' ').trim();
}

function walk(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  let results = [];
  for (const ent of entries) {
    const full = path.join(dir, ent.name);
    if (ent.isDirectory()) {
      results = results.concat(walk(full));
    } else if (ent.isFile() && ent.name.toLowerCase().endsWith('.pdf')) {
      results.push(full);
    }
  }
  return results;
}

function main() {
  if (!fs.existsSync(TARGET_FOLDER)) {
    console.warn('Certificates folder not found:', TARGET_FOLDER);
    // write empty file
    fs.mkdirSync(path.dirname(OUT_FILE), { recursive: true });
    fs.writeFileSync(OUT_FILE, `export const certificates = [];\nexport type Cert = (typeof certificates)[number];\n`);
    return;
  }

  const files = walk(TARGET_FOLDER);

  const grouped = {};

  files.forEach((fullPath, idx) => {
    const rel = path.relative(PUBLIC_DIR, fullPath).replace(/\\/g, '/');
    // group by top-level folder inside certificates
    const parts = rel.split('/');
    // expected: certificates/<group>/file.pdf or certificates/file.pdf
    let group = 'General';
    if (parts.length >= 2) group = parts[1];

    if (!grouped[group]) grouped[group] = [];
    grouped[group].push({
      id: 2000 + idx + 1,
      title: slugToTitle(path.basename(fullPath)),
      file: rel,
      url: encodeURI(`/${rel}`),
    });
  });

  const groupsArray = Object.keys(grouped).map(g => ({ group: g, items: grouped[g] }));

  const content = `// Auto-generated by scripts/generate-certificates.cjs\nexport const certificates = ${JSON.stringify(groupsArray, null, 2)} as const;\nexport type CertGroup = (typeof certificates)[number];\n`;

  fs.mkdirSync(path.dirname(OUT_FILE), { recursive: true });
  fs.writeFileSync(OUT_FILE, content, 'utf8');
  console.log('Wrote', OUT_FILE);
}

main();
